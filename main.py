import telebot
from telebot import types
import time
import sqlite3
from datetime import datetime
from keys import BOT_TOKEN
from keys import ADMIN_ID

bot = telebot.TeleBot(BOT_TOKEN)

#  –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('BotDatabase.db')
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        user_id INTEGER,
        username TEXT,
        name TEXT NOT NULL,
        level INTEGER DEFAULT 0,
        group_name TEXT NOT NULL,
        regdate TEXT NOT NULL
    );
    """)

conn.commit()
conn.close()


##################
#  –ö–æ–º–∞–Ω–¥–∞ /start#
##################
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id

    if str(message.chat.id).startswith('-'):
        bot.reply_to(message, f'–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!')
    else:
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü—É—à–∫–∏–Ω")
        bot.register_next_step_handler(message, get_group)

def get_group(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã:\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–ü–û-20.24")
    bot.register_next_step_handler(message, lambda message: add_user_to_database(message, user_id, name))


#  –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–º–∏–ª–∏–∏ –∏ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user_to_database(message, user_id, name):
    username = message.from_user.username
    group_name = message.text

    conn = sqlite3.connect('BotDatabase.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        bot.send_message(user_id, "‚ùå –ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        cursor.execute("INSERT INTO users (user_id, name, username, group_name, regdate) VALUES (?, ?, ?, ?, ?)", (user_id, name, username, group_name, datetime.now()))
        conn.commit()

    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIxA2Vwb9u2JFHI9bW118zaFGRALZ0JAAJXEwACsdrYSxCdi3yCDx7WMwQ')
    bot.send_message(user_id, f"üåü–û—Ç–ª–∏—á–Ω–æ, {message.from_user.first_name}, —Ç–µ–ø–µ—Ä—å —Ç—ã –≤ –±–∞–∑–µ —É—á–µ–Ω–∏–∫–æ–≤!\n–ñ–º–∏ /menu —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. ")

    conn.close()


####################
#  –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è#
####################
@bot.message_handler(commands=['up'])
def handle_levelup(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
    else:
        user_id = message.from_user.id
        up_user_level(user_id)
        bot.reply_to(message, f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} –≤—ã—Ä–æ—Å!")

def up_user_level(user_id):
    conn = sqlite3.connect("BotDatabase.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT level FROM users WHERE user_id= ?", (user_id,))
    result = cursor.fetchone()

    if result:
        current_level = result[0]
        new_level = current_level + 1
        cursor.execute("UPDATE users SET level=? WHERE user_id=?", (new_level, user_id))
    else:
        cursor.execute("INSERT INTO users (user_id, username, level) VALUES (?, ?)", (user_id))

    conn.commit()
    conn.close()

#  –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
@bot.message_handler(commands=['down'])
def handle_leveldown(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!")
    else:
        user_id = message.from_user.id
        down_user_level(user_id)
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIxKWVw8tSNd12kPbJj3We7xfljxqeYAAJkAgACVp29CnyLQQ3hCOHMMwQ')
        bot.reply_to(message, f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name} –ø–æ–Ω–∏–∂–µ–Ω!ü´§")

def down_user_level(user_id):
    conn = sqlite3.connect("BotDatabase.db")
    cursor = conn.cursor()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT level FROM users WHERE user_id= ?", (user_id,))
    result = cursor.fetchone()

    if result:
        current_level = result[0]
        new_level = current_level - 1
        cursor.execute("UPDATE users SET level=? WHERE user_id=?", (new_level, user_id))
    else:
        cursor.execute("INSERT INTO users (user_id, username, level) VALUES (?, ?)", (user_id))

    conn.commit()
    conn.close()


################
#  –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é#
################
@bot.message_handler(commands=['menu'])
def handle_menu(message):
    if str(message.chat.id).startswith('-'):
        bot.reply_to(message, f'–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º!')
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        button_level = types.KeyboardButton('üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å')
        button_rate = types.KeyboardButton('üéñ –†–µ–π—Ç–∏–Ω–≥')
        button_task = types.KeyboardButton('‚ùóÔ∏è –ó–∞–¥–∞–Ω–∏—è')
        button_help = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
        button_admin = types.KeyboardButton('üêü –†—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª')
        markup.add(button_task, button_help, button_level, button_rate, button_admin)
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIvomVpwx6xvVlFfmHcxF85an42HBQCAAJsAgACVp29CioZXpzE0N6fMwQ')
        bot.reply_to(message, f"üî•–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üî•\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup)


##########
# –†–µ–π—Ç–∏–Ω–≥#
##########
@bot.message_handler(func=lambda message: message.text == 'üéñ –†–µ–π—Ç–∏–Ω–≥')
def handle_rate(message):
    conn = sqlite3.connect('BotDatabase.db')
    cursor = conn.cursor()

    cursor.execute("SELECT name, username, level FROM users ORDER BY level DESC")
    users = cursor.fetchall()

    rating_message = "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for index, user in enumerate(users, start=1):
        name, username, level = user
        rating_message += f"{index}. {name}({username}) - –£—Ä. {level}\n"

    if rating_message == "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n":
        rating_message = "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞."

    bot.reply_to(message, rating_message)

    conn.close()

@bot.message_handler(func=lambda message: message.text == 'üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å')
def handle_level(message):
    user_id = message.from_user.id
    level = get_user_level(user_id)
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIxFmVw1cJE4gJV2HzPIVRiX-5VCXB5AAKFFgAC5n7ZS1CYRw2_NfbiMwQ')
    bot.reply_to(message, f"{message.from_user.first_name} —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {level}\n–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!")


################################
# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è#
################################
def get_user_level(user_id):
    conn = sqlite3.connect('BotDatabase.db')
    cursor = conn.cursor()

    cursor.execute("SELECT level FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()

    if result:
        level = result[0]
    else:
        level = 1

    conn.close()
    return level

###########
#  –ó–∞–¥–∞–Ω–∏—è#
###########
@bot.message_handler(func=lambda message: message.text == '‚ùóÔ∏è –ó–∞–¥–∞–Ω–∏—è')
def send_task(message):
    markup = telebot.types.InlineKeyboardMarkup()
    btn = telebot.types.InlineKeyboardButton(text=TASK_TEXT, url=TASK_LINK)
    markup.add(btn)
    bot.reply_to(message, "üìÅ –ó–∞–¥–∞–Ω–∏—è:", reply_markup=markup)

#  –ú–µ—Ç–æ–¥–∏—á–∫–∏
@bot.message_handler(func=lambda message: message.text == '‚ùì –ü–æ–º–æ—â—å')
def send_task(message):
    markup = telebot.types.InlineKeyboardMarkup()
    btn = telebot.types.InlineKeyboardButton(text=HELP_TEXT, url=HELP_LINK)
    markup.add(btn)
    bot.reply_to(message, "üìÑ –ú–µ—Ç–æ–¥–∏—á–∫–∏:", reply_markup=markup)


############################
#  –†—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª(–∞–¥–º–∏–Ω –º–µ–Ω—é)#
############################

@bot.message_handler(func=lambda message: message.text == 'üêü –†—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª')

def admin_level(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª!")
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
        button_push = types.KeyboardButton('‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞')
        button_clean = types.KeyboardButton('‚ò†Ô∏è –û—á–∏—Å—Ç–∫–∞ –ë–î')
        button_cleanv = types.KeyboardButton('üóë –í—ã–±–æ—Ä–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ë–î')
        button_linkz = types.KeyboardButton('üîó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–¥–∞–Ω–∏–π')
        button_textz = types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω–∏–π')
        button_linkh = types.KeyboardButton('üîó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –º–µ—Ç–æ–¥–∏—á–µ–∫')
        button_texth = types.KeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–µ—Ç–æ–¥–∏—á–µ–∫')
        button_back = types.KeyboardButton('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
        markup.add(button_linkz, button_textz, button_linkh, button_texth, button_push, button_clean, button_cleanv, button_back)
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw02VvmjfeFNRdZEXEGj7yyvzTkB98AAJoAgACVp29Cl96F8w-AAEUczME')
        bot.reply_to(message, f"üî•–ü—Ä–∏–≤–µ—Ç, —Ö–æ–∑—è–∏–Ωüî•\n–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?", reply_markup=markup)

###############################################################################################################
#  –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∞–¥–º–∏–Ω –º–µ–Ω—é(–ø–æ —Å—É—Ç–∏ —ç—Ç–æ –µ—â–µ –æ–¥–Ω–æ –º–µ–Ω—é –ø–æ–¥–æ–±–Ω–æ–µ –ø–µ—Ä–≤–æ–º—É –ª–æ–ª, –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –∫—Ä–∏–≤–æ —Ä–∞–±–æ—Ç–∞–ª–∞)#
###############################################################################################################
@bot.message_handler(func=lambda message: message.text == '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')
def handle_menu(message):
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    button_level = types.KeyboardButton('üèÜ –ü—Ä–æ–≥—Ä–µ—Å—Å')
    button_rate = types.KeyboardButton('üéñ –†–µ–π—Ç–∏–Ω–≥')
    button_task = types.KeyboardButton('‚ùóÔ∏è –ó–∞–¥–∞–Ω–∏—è')
    button_help = types.KeyboardButton('‚ùì –ü–æ–º–æ—â—å')
    button_admin = types.KeyboardButton('üêü –†—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª')
    markup.add(button_task, button_help, button_level, button_rate, button_admin)
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIvomVpwx6xvVlFfmHcxF85an42HBQCAAJsAgACVp29CioZXpzE0N6fMwQ')
    bot.reply_to(message, f"üî•–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}üî•\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=markup)


####################################
#  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è#
####################################
@bot.message_handler(func=lambda message: message.text == 'üîó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∑–∞–¥–∞–Ω–∏–π')
def admin_linkz(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª!")
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–∏–π:")
        bot.register_next_step_handler(message, update_linkz)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–µ—Ä–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ–π —Å—Å—ã–ª–∫–∏
def update_linkz(message):
    global TASK_LINK
    if message.text.startswith('http'):
        TASK_LINK = message.text
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIxA2Vwb9u2JFHI9bW118zaFGRALZ0JAAJXEwACsdrYSxCdi3yCDx7WMwQ')
        bot.reply_to(message, "‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http://")

#######################################
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω–∏–π#
#######################################
@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω–∏–π')
def admin_textz(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª!")
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞–Ω–∏–π:")
        bot.register_next_step_handler(message, update_textz)

def update_textz(message):
    global TASK_TEXT
    TASK_TEXT = message.text
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIxA2Vwb9u2JFHI9bW118zaFGRALZ0JAAJXEwACsdrYSxCdi3yCDx7WMwQ')
    bot.reply_to(message, "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")


######################################
#  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–µ—Ç–æ–¥–∏—á–∫–∏#
######################################
@bot.message_handler(func=lambda message: message.text == 'üîó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –º–µ—Ç–æ–¥–∏—á–µ–∫')
def admin_linkh(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª!")
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –º–µ—Ç–æ–¥–∏—á–µ–∫:")
        bot.register_next_step_handler(message, update_linkh)

#  –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–µ–Ω–æ–π —Å—Å—ã–ª–∫–∏
def update_linkh(message):
    global HELP_LINK
    if message.text.startswith('http'):
        HELP_LINK = message.text
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIxA2Vwb9u2JFHI9bW118zaFGRALZ0JAAJXEwACsdrYSxCdi3yCDx7WMwQ')
        bot.reply_to(message, "‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http://")


##########################################
#  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –º–µ—Ç–æ–¥–∏—á–µ–∫#
##########################################
@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –º–µ—Ç–æ–¥–∏—á–µ–∫')
def admin_texth(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª!")
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –º–µ—Ç–æ–¥–∏—á–µ–∫:")
        bot.register_next_step_handler(message, update_texth)

def update_texth(message):
    global HELP_TEXT
    HELP_TEXT = message.text
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIxA2Vwb9u2JFHI9bW118zaFGRALZ0JAAJXEwACsdrYSxCdi3yCDx7WMwQ')
    bot.reply_to(message, "‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")


###########
# –†–∞—Å—Å—ã–ª–∫–∞#
###########
@bot.message_handler(func=lambda message: message.text == '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞')
def handle_push(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª!")
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(message, send_message_to_all)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def send_message_to_all(message):
    conn = sqlite3.connect('BotDatabase.db')
    cursor = conn.cursor()

    cursor.execute("SELECT user_id FROM users")
    user_ids = cursor.fetchall()

    for user_id in user_ids:
        bot.send_message(user_id[0], message.text)

    bot.reply_to(message, "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    conn.close()


#################################################################################################################################
#  –û—á–∏—Å—Ç–∫–∞ –±–¥                                                                                                                   #
#  –¢–∞–∫ –∫–∞–∫ —Ä–µ–π—Ç–∏–Ω–≥ –ª–∏—Å—Ç –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —é–∑–µ—Ä—Å, –±—É–¥–µ—Ç –Ω–µ –æ—á–µ–Ω—å –µ—Å–ª–∏ —Ç–∞–º –±—É–¥–µ—Ç –∫—É—á–∞ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø#
#################################################################################################################################
@bot.message_handler(func=lambda message: message.text == '‚ò†Ô∏è –û—á–∏—Å—Ç–∫–∞ –ë–î')
def handle_clean(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIw1mVvnA_YvcCURR31sVtPkI-ASdOJAAJbAgACVp29CgAB3yMzQxabnjME')
        bot.reply_to(message, f"üö´ –ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ —Ä—ã–±–Ω—ã–π –æ—Ç–¥–µ–ª!")
    else:
        conn = sqlite3.connect('BotDatabase.db')
        cursor = conn.cursor()

        cursor.execute("DELETE FROM users")
        conn.commit()

        bot.reply_to(message, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –≤–≤–µ—Å—Ç–∏ /start —á—Ç–æ–±—ã –±–æ—Ç –≤–Ω–µ—Å –µ–≥–æ –≤ –±–¥.")

        conn.close()


################
#  –ö–æ–º–∞–Ω–¥–∞ /all#
################
@bot.message_handler(commands=['all'])
def handle_all(message):
    chat_id = message.chat.id

    conn = sqlite3.connect('BotDatabase.db')
    cursor = conn.cursor()

    cursor.execute("SELECT username FROM users")
    usernames = cursor.fetchall()

    marked_message = "–û—Ç–º–µ—á–µ–Ω—ã:\n"
    for username in usernames:
        if username[0] is not None:
            marked_message += f"@{username[0]}\n"

    bot.reply_to(message, marked_message)

    conn.close()

@bot.message_handler(func=lambda message: message.text == 'üóë –í—ã–±–æ—Ä–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ë–î')
def handle_cleanv(message):
    chat_id = message.chat.id

    conn = sqlite3.connect('BotDatabase.db')
    cursor = conn.cursor()

    cursor.execute("SELECT DISTINCT group_name FROM users")
    groups = cursor.fetchall()

    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    for group in groups:
        keyboard.add(types.KeyboardButton(group[0]))

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    bot.register_next_step_handler(message, lambda message: delete_users(message, groups))

def delete_users(message, groups):
    chat_id = message.chat.id
    group_to_delete = message.text

    if (group_to_delete,) in groups:
        conn = sqlite3.connect('BotDatabase.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE group_name=?", (group_to_delete,))
        conn.commit()
        conn.close()
        bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã {group_to_delete} –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã")
    else:
        bot.send_message(chat_id, "‚ùå –≠—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ–Ω–∞ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞")


#####################
#  –°—Ç–∞—Ä—Ç —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞#
#####################
def main():
    print('–ë–æ—Ç –Ω—è—á–∞–ª —Ä–∞–±–æ—Ç—É!!')
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(e)
            time.sleep(1)

if __name__ == "__main__":
    main()